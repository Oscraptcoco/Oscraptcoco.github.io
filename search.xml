<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>远程Dll注入</title>
    <url>/2022/06/23/%E4%B8%80%E3%80%81%E8%BF%9C%E7%A8%8BDll%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<ul>
<li>原理以及步骤：</li>
</ul>
<ol>
<li>使用AdjustTokenPrivileges函数对当前进程进行提权</li>
<li>使用Process32First函数取得目标进程ID</li>
<li>使用OpenProcess函数打开目标进程</li>
<li>使用VirtualAllocEx函数为目标进程分配空间</li>
<li>使用WriteProcessMemory函数写入Dll路径</li>
<li>使用GetProcAddress函数取得LoadLibrary函数地址</li>
<li>使用CreateRemoteThread函数创建远程线程执行LoadLibrary</li>
</ol>
<ul>
<li>具体实现过程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AdjustPrivilege</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE TheToken = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (::OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &amp;TheToken))</span><br><span class="line">	&#123;</span><br><span class="line">		TOKEN_PRIVILEGES tkp;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;tkp.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">		tkp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">		tkp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">		AdjustTokenPrivileges(TheToken, FALSE, &amp;tkp, <span class="keyword">sizeof</span>(tkp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">GetProcessID</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ErrorCode;</span><br><span class="line">	<span class="type">char</span> szExeName[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	PROCESSENTRY32 pe;</span><br><span class="line">	ZeroMemory(&amp;pe, <span class="keyword">sizeof</span>(pe));</span><br><span class="line">	pe.dwSize = <span class="keyword">sizeof</span>(pe);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入程序名称：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, szExeName);</span><br><span class="line">	HANDLE hSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		ErrorCode = GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;调用失败,错误码：%d\n&quot;</span>, ErrorCode);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bRet = ::Process32First(hSnap, &amp;pe);</span><br><span class="line">	<span class="keyword">while</span> (bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe.szExeFile, szExeName) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程名称：%s\n进程ID：%u\n&quot;</span>, pe.szExeFile, (<span class="type">unsigned</span> <span class="type">int</span>)pe.th32ProcessID);</span><br><span class="line">			<span class="keyword">return</span> pe.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">		bRet = ::Process32Next(hSnap, &amp;pe);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD dwProcessId;</span><br><span class="line">	dwProcessId=GetProcessID();</span><br><span class="line">	<span class="type">char</span> *dllpath = (<span class="type">char</span>*)<span class="string">&quot;C:\\Users\\Lenovo\\source\\repos\\Dll\\x64\\Debug\\Dll.dll&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (dwProcessId == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;未找到，请重试\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AdjustPrivilege();</span><br><span class="line"><span class="comment">//打开目标进程取得句柄</span></span><br><span class="line">	HANDLE hTarget = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">	<span class="keyword">if</span> (hTarget == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开错误\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//为目标进程分配大小用Dllpath大小的内存空间</span></span><br><span class="line">	LPVOID paraAddr=::VirtualAllocEx(hTarget, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(dllpath) + <span class="number">1</span>, MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (paraAddr == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;空间分配错误\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//将DllPath写入内存空间</span></span><br><span class="line">	<span class="keyword">if</span> (!::WriteProcessMemory(hTarget, paraAddr, dllpath, <span class="built_in">strlen</span>(dllpath) + <span class="number">1</span>, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;写入内存失败\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//取得LoadLibrary函数地址</span></span><br><span class="line">	HINSTANCE LibHandle = ::LoadLibrary(<span class="string">&quot;Kernel32&quot;</span>);</span><br><span class="line">	UINT64  ProcAdd = (UINT64)GetProcAddress(LibHandle, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">	DWORD threadid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//创建远程线程</span></span><br><span class="line">	HANDLE hThread = ::CreateRemoteThread(hTarget, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)ProcAdd, paraAddr, <span class="number">0</span>, &amp;threadid);</span><br><span class="line">	::CloseHandle(hTarget);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下</li>
</ul>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/23/9f02f1d55207c1d1.png" alt="                                                                             注入成功"></p>
<pre><code>                                                                         注入成功
</code></pre>
]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
</search>
